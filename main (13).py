import os
import json
import shutil
import asyncio
import re
import glob
import html
import time
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, CommandObject
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.methods import SetMyCommands
from aiogram.client.default import DefaultBotProperties
import yt_dlp
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# >>> –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê FFMPEG –ù–ê REPLIT <<<
if not os.path.exists("ffmpeg"):
    os.system("curl -L https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz -o ffmpeg.tar.xz")
    os.system("tar -xf ffmpeg.tar.xz")
    for fname in os.listdir("."):
        if fname.startswith("ffmpeg") and "static" in fname:
            os.rename(fname, "ffmpeg")
    os.remove("ffmpeg.tar.xz")
# <<< –ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò FFMPEG <<<

BOT_TOKEN = os.getenv("BOT_TOKEN", "7924842430:AAG1E1ot8-YRvZCFUh86qhLXSq6k1kCre_4")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY", "AIzaSyBfocrRYNLsFG3veB7J4Mf6o6BPmcvLoTA")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7058578094"))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML), session=AiohttpSession())
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube API
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)

DOWNLOADS_FOLDER = "downloads"
PLAYLISTS_FOLDER = "playlists"
SUBSCRIPTIONS_FILE = "required_subscriptions.json"
USERS_FILE = "bot_users.json"
os.makedirs(DOWNLOADS_FOLDER, exist_ok=True)
os.makedirs(PLAYLISTS_FOLDER, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_last_tracks = {}
user_search_results = {}
top_tracks_cache = {}
genre_tracks_cache = {}
pending_broadcasts = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
admin_waiting_for_channel = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
admin_in_broadcast_mode = False  # –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

def load_required_subscriptions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    if os.path.exists(SUBSCRIPTIONS_FILE):
        try:
            with open(SUBSCRIPTIONS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_required_subscriptions(subscriptions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    with open(SUBSCRIPTIONS_FILE, 'w', encoding='utf-8') as f:
        json.dump(subscriptions, f, indent=2, ensure_ascii=False)

def load_bot_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_bot_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

def add_user_to_database(user_id, username=None, first_name=None, last_name=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    users = load_bot_users()
    users[str(user_id)] = {
        'user_id': user_id,
        'username': username,
        'first_name': first_name,
        'last_name': last_name,
        'first_interaction': time.time(),
        'last_interaction': time.time()
    }
    save_bot_users(users)

async def check_user_subscriptions(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    required_subs = load_required_subscriptions()

    if not required_subs:
        return True, []  # –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫

    not_subscribed = []

    for channel_id, channel_info in required_subs.items():
        try:
            member = await bot.get_chat_member(channel_id, user_id)
            if member.status in ['left', 'kicked']:
                not_subscribed.append(channel_info)
        except Exception as e:
            # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            not_subscribed.append(channel_info)

    return len(not_subscribed) == 0, not_subscribed

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID

async def broadcast_message_to_users(message_obj, buttons, admin_id, clean_text=None, clean_caption=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞"""
    users = load_bot_users()
    success_count = 0
    failed_count = 0

    progress_msg = await bot.send_message(
        admin_id, 
        f"üì§ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: <b>{len(users)}</b>"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    keyboard = None
    if buttons:
        keyboard_builder = InlineKeyboardBuilder()
        for button in buttons:
            keyboard_builder.row(InlineKeyboardButton(text=button['text'], url=button['url']))
        keyboard = keyboard_builder.as_markup()

    for user_id_str in users.keys():
        user_id = int(user_id_str)
        if user_id == admin_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            continue

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            if message_obj.text:
                text_to_send = clean_text if clean_text else message_obj.text
                await bot.send_message(user_id, text_to_send, parse_mode=ParseMode.HTML, reply_markup=keyboard)
            elif message_obj.photo:
                photo = message_obj.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                caption_to_send = clean_caption if clean_caption else (message_obj.caption or "")
                await bot.send_photo(user_id, photo.file_id, caption=caption_to_send, parse_mode=ParseMode.HTML, reply_markup=keyboard)
            elif message_obj.audio:
                caption_to_send = clean_caption if clean_caption else (message_obj.caption or "")
                await bot.send_audio(user_id, message_obj.audio.file_id, caption=caption_to_send, parse_mode=ParseMode.HTML, reply_markup=keyboard)
            elif message_obj.voice:
                caption_to_send = clean_caption if clean_caption else (message_obj.caption or "")
                await bot.send_voice(user_id, message_obj.voice.file_id, caption=caption_to_send, parse_mode=ParseMode.HTML, reply_markup=keyboard)
            elif message_obj.video:
                caption_to_send = clean_caption if clean_caption else (message_obj.caption or "")
                await bot.send_video(user_id, message_obj.video.file_id, caption=caption_to_send, parse_mode=ParseMode.HTML, reply_markup=keyboard)
            elif message_obj.video_note:
                await bot.send_video_note(user_id, message_obj.video_note.file_id, reply_markup=keyboard)
            elif message_obj.document:
                caption_to_send = clean_caption if clean_caption else (message_obj.caption or "")
                await bot.send_document(user_id, message_obj.document.file_id, caption=caption_to_send, parse_mode=ParseMode.HTML, reply_markup=keyboard)
            elif message_obj.sticker:
                await bot.send_sticker(user_id, message_obj.sticker.file_id, reply_markup=keyboard)
            elif message_obj.animation:
                caption_to_send = clean_caption if clean_caption else (message_obj.caption or "")
                await bot.send_animation(user_id, message_obj.animation.file_id, caption=caption_to_send, parse_mode=ParseMode.HTML, reply_markup=keyboard)

            success_count += 1

        except Exception as e:
            failed_count += 1
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
            if "bot was blocked by the user" in str(e).lower() or "user is deactivated" in str(e).lower():
                users = load_bot_users()
                if user_id_str in users:
                    del users[user_id_str]
                    save_bot_users(users)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = f"""
‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success_count}</b>
‚Ä¢ –û—à–∏–±–æ–∫: <b>{failed_count}</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>

üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.
    """

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))

    await bot.edit_message_text(
        result_text,
        chat_id=admin_id,
        message_id=progress_msg.message_id,
        reply_markup=keyboard.as_markup()
    )

async def send_subscription_required_message(message_or_callback, not_subscribed_channels):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = "‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!</b>\n\n"
    text += "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã:\n\n"

    keyboard = InlineKeyboardBuilder()

    for channel in not_subscribed_channels:
        channel_name = channel.get('title', channel.get('username', '–ö–∞–Ω–∞–ª'))
        channel_link = channel.get('invite_link') or f"https://t.me/{channel.get('username', '')}"

        text += f"‚Ä¢ <b>{channel_name}</b>\n"
        if channel_link:
            keyboard.row(InlineKeyboardButton(
                text=f"üì¢ {channel_name}",
                url=channel_link
            ))

    text += "\n‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
    keyboard.row(InlineKeyboardButton(
        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏",
        callback_data="check_subscriptions"
    ))

    if hasattr(message_or_callback, 'message'):
        await bot.edit_message_text(
            text,
            chat_id=message_or_callback.from_user.id,
            message_id=message_or_callback.message.message_id,
            reply_markup=keyboard.as_markup()
        )
    else:
        await message_or_callback.answer(text, reply_markup=keyboard.as_markup())

# –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–æ–∫
MUSIC_GENRES = {
    "pop": "üéµ –ü–æ–ø",
    "rock": "üé∏ –†–æ–∫",
    "hip_hop": "üé§ –•–∏–ø-—Ö–æ–ø",
    "electronic": "üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è",
    "jazz": "üé∫ –î–∂–∞–∑",
    "classical": "üéº –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è",
    "country": "ü§† –ö–∞–Ω—Ç—Ä–∏",
    "reggae": "üå¥ –†–µ–≥–≥–∏",
    "blues": "üé∑ –ë–ª—é–∑",
    "folk": "üéª –§–æ–ª–∫",
    "metal": "‚ö° –ú–µ—Ç–∞–ª",
    "indie": "üåü –ò–Ω–¥–∏"
}

def get_user_playlist_path(user_id):
    return os.path.join(PLAYLISTS_FOLDER, f"{user_id}.json")

def load_playlists(user_id):
    path = get_user_playlist_path(user_id)
    if os.path.exists(path):
        with open(path, 'r') as f:
            return json.load(f)
    return {}

def save_playlists(user_id, playlists):
    with open(get_user_playlist_path(user_id), 'w') as f:
        json.dump(playlists, f, indent=2)

def sanitize_filename(name):
    return re.sub(r'[\\/*?:"<>|]', "", name)

def is_music_content(title, description="", duration=None, channel_title=""):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    title_lower = title.lower()
    desc_lower = description.lower() if description else ""
    channel_lower = channel_title.lower() if channel_title else ""

    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º—É–∑—ã–∫–∏
    music_keywords = [
        'song', '–ø–µ—Å–Ω—è', 'music', '–º—É–∑—ã–∫–∞', 'audio', 'sound', 'track', '—Ç—Ä–µ–∫',
        'official', 'ofici√°l', '–∫–ª–∏–ø', 'clip', 'lyric', '—Ç–µ–∫—Å—Ç', 'cover',
        'acoustic', 'live', 'concert', 'instrumental', 'remix', 'edit',
        '–∞–ª—å–±–æ–º', 'album', 'single', '—Å–∏–Ω–≥–ª', 'hit', '—Ö–∏—Ç'
    ]

    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/–ª–µ–π–±–ª—ã
    music_channels = [
        'vevo', 'records', 'music', 'sound', 'audio', 'official',
        '–ª–µ–π–±–ª', '—Å—Ç—É–¥–∏—è', '–ø—Ä–æ–¥–∞–∫—à–Ω', 'production', 'entertainment'
    ]

    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–Ω–µ –º—É–∑—ã–∫–∞)
    bad_keywords = [
        'playlist', '–ø–ª–µ–π–ª–∏—Å—Ç', '–ø–æ–¥–±–æ—Ä–∫–∞', '—Å–±–æ—Ä–Ω–∏–∫', '–º–∏–∫—Å', 'mix compilation',
        '–ª—É—á—à–∏–µ –ø–µ—Å–Ω–∏', 'best songs', 'top songs', 'hours of', '—á–∞—Å –º—É–∑—ã–∫–∏',
        'minutes of', 'non stop', '–Ω–æ–Ω —Å—Ç–æ–ø', 'collection', '—Å–æ–±—Ä–∞–Ω–∏–µ',
        'full album', '–ø–æ–ª–Ω—ã–π –∞–ª—å–±–æ–º', 'tutorial', '—É—Ä–æ–∫', 'how to',
        'reaction', '—Ä–µ–∞–∫—Ü–∏—è', 'review', '–æ–±–∑–æ—Ä', 'interview', '–∏–Ω—Ç–µ—Ä–≤—å—é',
        'podcast', '–ø–æ–¥–∫–∞—Å—Ç', 'talk', '—Ä–∞–∑–≥–æ–≤–æ—Ä', 'news', '–Ω–æ–≤–æ—Å—Ç–∏',
        'trailer', '—Ç—Ä–µ–π–ª–µ—Ä', 'teaser', '—Ç–∏–∑–µ—Ä', 'behind', 'making of',
        'documentary', '–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', 'shorts', '—à–æ—Ä—Ç—Å', 'story', 'stories'
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    for keyword in bad_keywords:
        if keyword in title_lower or keyword in desc_lower:
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –ø–µ—Å–Ω–∏)
    if duration:
        if duration > 900:  # –ë–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç
            return False
        if duration < 30:   # –ú–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–ø—Ä–∏–∑–Ω–∞–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞)
    time_patterns = [
        r'\d{2,}:\d{2}', r'\d{1,2}\s*—á–∞—Å', r'\d{2,}\s*min', r'\d{2,}\s*–º–∏–Ω—É—Ç'
    ]
    for pattern in time_patterns:
        if re.search(pattern, title_lower):
            return False

    # –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    music_score = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    for keyword in music_keywords:
        if keyword in title_lower:
            music_score += 2
        if keyword in desc_lower:
            music_score += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    for keyword in music_channels:
        if keyword in channel_lower:
            music_score += 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Å–µ–Ω
    if any(char in title for char in ['(', ')', '[', ']', '-', '|', 'ft.', 'feat.', '&']):
        music_score += 1

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–≤—ã—á–∫–∏ (—á–∞—Å—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–µ—Å–µ–Ω)
    if any(char in title for char in ['"', "'", '¬´', '¬ª']):
        music_score += 1

    return music_score >= 3

async def check_video_availability(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"""
    ydl_opts_check = {
        "quiet": True,
        "no_warnings": True,
        "extract_flat": False,
        "skip_download": True
    }

    try:
        loop = asyncio.get_event_loop()
        with yt_dlp.YoutubeDL(ydl_opts_check) as ydl:
            info = await loop.run_in_executor(None, lambda: ydl.extract_info(url, download=False))
            return info is not None and info.get('title') is not None
    except Exception:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    for keyword in bad_keywords:
        if keyword in title_lower or keyword in desc_lower:
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –ø–µ—Å–Ω–∏)
    if duration:
        if duration > 900:  # –ë–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç
            return False
        if duration < 30:   # –ú–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–ø—Ä–∏–∑–Ω–∞–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞)
    time_patterns = [
        r'\d{2,}:\d{2}', r'\d{1,2}\s*—á–∞—Å', r'\d{2,}\s*min', r'\d{2,}\s*–º–∏–Ω—É—Ç'
    ]
    for pattern in time_patterns:
        if re.search(pattern, title_lower):
            return False

    # –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    music_score = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    for keyword in music_keywords:
        if keyword in title_lower:
            music_score += 2
        if keyword in desc_lower:
            music_score += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    for keyword in music_channels:
        if keyword in channel_lower:
            music_score += 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Å–µ–Ω
    if any(char in title for char in ['(', ')', '[', ']', '-', '|', 'ft.', 'feat.', '&']):
        music_score += 1

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–≤—ã—á–∫–∏ (—á–∞—Å—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–µ—Å–µ–Ω)
    if any(char in title for char in ['"', "'", '¬´', '¬ª']):
        music_score += 1

    return music_score >= 3

async def get_youtube_top_tracks(genre=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø —Ç—Ä–µ–∫–∏ —Å YouTube –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    try:
        if genre:
            cache_key = f"genre_{genre}"
        else:
            cache_key = "top_global"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
        import time
        current_time = time.time()
        if cache_key in (genre_tracks_cache if genre else top_tracks_cache):
            cache_data = (genre_tracks_cache if genre else top_tracks_cache)[cache_key]
            if current_time - cache_data.get('timestamp', 0) < 21600:  # 6 —á–∞—Å–æ–≤
                return cache_data['tracks']

        tracks = []

        if genre:
            # –î–ª—è –∂–∞–Ω—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
            russian_genre_queries = {
                "pop": ["–ø–æ–ø –º—É–∑—ã–∫–∞ 2024", "—Ä—É—Å—Å–∫–∏–π –ø–æ–ø", "–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞"],
                "rock": ["—Ä–æ–∫ –º—É–∑—ã–∫–∞ 2024", "—Ä—É—Å—Å–∫–∏–π —Ä–æ–∫", "—Ä–æ–∫ —Ö–∏—Ç—ã"],
                "hip_hop": ["—Ö–∏–ø —Ö–æ–ø 2024", "—Ä—É—Å—Å–∫–∏–π —Ä—ç–ø", "—Ä—ç–ø —Ö–∏—Ç—ã"],
                "electronic": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ 2024", "electronic russian"],
                "jazz": ["–¥–∂–∞–∑ 2024", "—Ä—É—Å—Å–∫–∏–π –¥–∂–∞–∑", "–¥–∂–∞–∑ —Ö–∏—Ç—ã"],
                "classical": ["–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞", "–∫–ª–∞—Å—Å–∏–∫–∞ 2024", "—Ä—É—Å—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞"],
                "country": ["–∫–∞–Ω—Ç—Ä–∏ –º—É–∑—ã–∫–∞", "country 2024", "—Ñ–æ–ª–∫ –º—É–∑—ã–∫–∞"],
                "reggae": ["—Ä–µ–≥–≥–∏ 2024", "reggae russian", "—Ä–µ–≥–≥–∏ —Ö–∏—Ç—ã"],
                "blues": ["–±–ª—é–∑ 2024", "blues russian", "–±–ª—é–∑ —Ö–∏—Ç—ã"],
                "folk": ["—Ñ–æ–ª–∫ –º—É–∑—ã–∫–∞", "—Ä—É—Å—Å–∫–∏–π —Ñ–æ–ª–∫", "–Ω–∞—Ä–æ–¥–Ω–∞—è –º—É–∑—ã–∫–∞"],
                "metal": ["–º–µ—Ç–∞–ª 2024", "—Ä—É—Å—Å–∫–∏–π –º–µ—Ç–∞–ª", "metal russian"],
                "indie": ["–∏–Ω–¥–∏ –º—É–∑—ã–∫–∞", "indie russian", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"]
            }

            search_queries = russian_genre_queries.get(genre, [f"{genre} –º—É–∑—ã–∫–∞ 2024"])

            for search_query in search_queries:
                try:
                    request = youtube.search().list(
                        part='snippet',
                        q=search_query,
                        type='video',
                        maxResults=30,
                        order='relevance',
                        regionCode='RU',
                        relevanceLanguage='ru',
                        videoCategoryId='10',
                        videoDuration='short'
                    )
                    response = request.execute()

                    for item in response['items']:
                        title = item['snippet']['title']
                        description = item['snippet'].get('description', '')
                        channel_title = item['snippet']['channelTitle']

                        if is_music_content(title, description, None, channel_title) and len(tracks) < 50:
                            tracks.append({
                                'id': item['id']['videoId'],
                                'title': title,
                                'channel': channel_title,
                                'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}"
                            })

                    if len(tracks) >= 50:
                        break

                except Exception:
                    continue
        else:
            # –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            try:
                request = youtube.videos().list(
                    part='snippet,statistics,contentDetails',
                    chart='mostPopular',
                    regionCode='RU',
                    videoCategoryId='10',
                    maxResults=50
                )
                response = request.execute()

                if response['items']:
                    for item in response['items']:
                        title = item['snippet']['title']
                        description = item['snippet'].get('description', '')
                        channel_title = item['snippet']['channelTitle']

                        if is_music_content(title, description, None, channel_title):
                            tracks.append({
                                'id': item['id'],
                                'title': title,
                                'channel': channel_title,
                                'url': f"https://www.youtube.com/watch?v={item['id']}"
                            })
                else:
                    raise Exception("No trending videos available")

            except:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                search_queries = [
                    "—Ö–∏—Ç—ã 2024 –º—É–∑—ã–∫–∞",
                    "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Å–Ω–∏ 2024",
                    "—Ä—É—Å—Å–∫–∞—è –º—É–∑—ã–∫–∞ 2024",
                    "—Ç–æ–ø –ø–µ—Å–Ω–∏ —Ä–æ—Å—Å–∏–∏",
                    "–Ω–æ–≤–∏–Ω–∫–∏ –º—É–∑—ã–∫–∏ 2024",
                    "—á–∞—Ä—Ç —Ä–æ—Å—Å–∏—è",
                    "russian music hits 2024",
                    "–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞ —Å–Ω–≥"
                ]

                for query in search_queries:
                    try:
                        request = youtube.search().list(
                            part='snippet',
                            q=query,
                            type='video',
                            maxResults=15,
                            order='relevance',
                            regionCode='RU',
                            relevanceLanguage='ru',
                            videoCategoryId='10',
                            videoDuration='short'
                        )
                        response = request.execute()

                        for item in response['items']:
                            title = item['snippet']['title']
                            description = item['snippet'].get('description', '')
                            channel_title = item['snippet']['channelTitle']

                            if is_music_content(title, description, None, channel_title) and len(tracks) < 50:
                                tracks.append({
                                    'id': item['id']['videoId'],
                                    'title': title,
                                    'channel': channel_title,
                                    'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}"
                                })

                        if len(tracks) >= 50:
                            break
                    except Exception:
                        continue

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        seen_ids = set()
        unique_tracks = []
        for track in tracks:
            if track['id'] not in seen_ids:
                seen_ids.add(track['id'])
                unique_tracks.append(track)

        tracks = unique_tracks[:50]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        cache_data = {
            'tracks': tracks,
            'timestamp': current_time
        }

        if genre:
            genre_tracks_cache[cache_key] = cache_data
        else:
            top_tracks_cache[cache_key] = cache_data

        return tracks

    except HttpError as e:
        print(f"YouTube API error: {e}")
        return []
    except Exception as e:
        print(f"Error fetching tracks: {e}")
        return []

async def show_top_tracks_menu(message_or_callback, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    tracks = await get_youtube_top_tracks()

    if not tracks:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø —Ç—Ä–µ–∫–∏"
        if hasattr(message_or_callback, 'message'):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await bot.delete_message(
                    chat_id=message_or_callback.from_user.id,
                    message_id=message_or_callback.message.message_id
                )
            except:
                pass
            await bot.send_message(message_or_callback.from_user.id, text)
        else:
            await message_or_callback.answer(text)
        return

    tracks_per_page = 10
    total_pages = (len(tracks) - 1) // tracks_per_page + 1
    start_idx = page * tracks_per_page
    end_idx = min(start_idx + tracks_per_page, len(tracks))

    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start_idx, end_idx):
        track = tracks[i]
        title = track['title']
        if len(title) > 45:
            title = title[:42] + "..."
        keyboard.row(InlineKeyboardButton(
            text=f"üéµ {title}",
            callback_data=f"toptrack:{i}"
        ))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"toppage:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data=f"toppage:{page+1}"))

    if nav_buttons:
        keyboard.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    text = f"""
üèÜ <b>–¢–æ–ø-50 —Ç—Ä–µ–∫–æ–≤</b>

üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page + 1}</b> –∏–∑ <b>{total_pages}</b>
üéµ –ü–æ–∫–∞–∑–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: <b>{end_idx - start_idx}</b> –∏–∑ <b>{len(tracks)}</b>

üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
    """

    if hasattr(message_or_callback, 'message'):
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await bot.delete_message(
                chat_id=message_or_callback.from_user.id,
                message_id=message_or_callback.message.message_id
            )
        except:
            pass
        await bot.send_message(
            chat_id=message_or_callback.from_user.id,
            text=text,
            reply_markup=keyboard.as_markup()
        )
    else:
        await message_or_callback.answer(text, reply_markup=keyboard.as_markup())

async def show_bot_features(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    text = """
‚ÑπÔ∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Music Bot</b>

üéµ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üèÜ <b>–¢–æ–ø-50 —Ç—Ä–µ–∫–æ–≤</b> - –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
‚Ä¢ üéº <b>–ü–æ–¥–±–æ—Ä–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º</b> - –õ—É—á—à–∏–µ —Ç—Ä–µ–∫–∏ –ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –∂–∞–Ω—Ä–∞–º
‚Ä¢ üîç <b>–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏</b> - –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
‚Ä¢ üé¨ <b>–ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ</b> - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É YouTube –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

üì± <b>–ü–ª–µ–π–ª–∏—Å—Ç—ã:</b>
‚Ä¢ üìù <b>/addtopl</b> –ù–∞–∑–≤–∞–Ω–∏–µ–ü–ª–µ–π–ª–∏—Å—Ç–∞ - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
‚Ä¢ üìã <b>/playlists</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–∫–æ–≤

üéß <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b>
‚Ä¢ üéµ MP3 —Ñ–æ—Ä–º–∞—Ç 192 kbps
‚Ä¢ üñºÔ∏è –û–±–ª–æ–∂–∫–∏ –∞–ª—å–±–æ–º–æ–≤
‚Ä¢ üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –Ω–∞–∑–≤–∞–Ω–∏–µ)
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞

üî• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üéØ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
‚Ä¢ üõ°Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
3. –ü–æ–ª—É—á–∏—Ç–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π MP3 —Ñ–∞–π–ª
4. –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """

    if hasattr(message_or_callback, 'message'):
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await bot.delete_message(
                chat_id=message_or_callback.from_user.id,
                message_id=message_or_callback.message.message_id
            )
        except:
            pass
        await bot.send_message(
            chat_id=message_or_callback.from_user.id,
            text=text,
            reply_markup=keyboard.as_markup()
        )
    else:
        await message_or_callback.answer(text, reply_markup=keyboard.as_markup())

async def show_genres_menu(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∂–∞–Ω—Ä–æ–≤"""
    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã –ø–æ 2 –≤ —Ä—è–¥
    genre_items = list(MUSIC_GENRES.items())
    for i in range(0, len(genre_items), 2):
        row_buttons = []
        for j in range(i, min(i + 2, len(genre_items))):
            genre_key, genre_name = genre_items[j]
            row_buttons.append(InlineKeyboardButton(
                text=genre_name,
                callback_data=f"genre:{genre_key}"
            ))
        keyboard.row(*row_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    text = """
üéº <b>–ü–æ–¥–±–æ—Ä–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º</b>

üéµ –í—ã–±–µ—Ä–∏—Ç–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∂–∞–Ω—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø-50 —Ç—Ä–µ–∫–æ–≤:
    """

    if hasattr(message_or_callback, 'message'):
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await bot.delete_message(
                chat_id=message_or_callback.from_user.id,
                message_id=message_or_callback.message.message_id
            )
        except:
            pass
        await bot.send_message(
            chat_id=message_or_callback.from_user.id,
            text=text,
            reply_markup=keyboard.as_markup()
        )
    else:
        await message_or_callback.answer(text, reply_markup=keyboard.as_markup())

async def show_genre_tracks(message_or_callback, genre, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞"""
    tracks = await get_youtube_top_tracks(genre)

    if not tracks:
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏ –∂–∞–Ω—Ä–∞ {MUSIC_GENRES.get(genre, genre)}"
        if hasattr(message_or_callback, 'message'):
            await bot.edit_message_text(text, message_or_callback.from_user.id, message_or_callback.message.message_id)
        else:
            await message_or_callback.answer(text)
        return

    tracks_per_page = 10
    total_pages = (len(tracks) - 1) // tracks_per_page + 1
    start_idx = page * tracks_per_page
    end_idx = min(start_idx + tracks_per_page, len(tracks))

    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start_idx, end_idx):
        track = tracks[i]
        title = track['title']
        if len(title) > 45:
            title = title[:42] + "..."
        keyboard.row(InlineKeyboardButton(
            text=f"üéµ {title}",
            callback_data=f"genretrack:{genre}:{i}"
        ))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"genrepage:{genre}:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data=f"genrepage:{genre}:{page+1}"))

    if nav_buttons:
        keyboard.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row(
        InlineKeyboardButton(text="üîô –ö –∂–∞–Ω—Ä–∞–º", callback_data="genres_menu"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )

    genre_name = MUSIC_GENRES.get(genre, genre)
    text = f"""
{genre_name} <b>- –¢–æ–ø —Ç—Ä–µ–∫–∏</b>

üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page + 1}</b> –∏–∑ <b>{total_pages}</b>
üéµ –ü–æ–∫–∞–∑–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: <b>{end_idx - start_idx}</b> –∏–∑ <b>{len(tracks)}</b>

üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
    """

    if hasattr(message_or_callback, 'message'):
        await bot.edit_message_text(
            text,
            chat_id=message_or_callback.from_user.id,
            message_id=message_or_callback.message.message_id,
            reply_markup=keyboard.as_markup()
        )
    else:
        await message_or_callback.answer(text, reply_markup=keyboard.as_markup())

async def show_admin_menu(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    required_subs = load_required_subscriptions()
    users = load_bot_users()

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_add_channel"),
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="admin_list_channels")
    )

    if required_subs:
        keyboard.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_remove_channel"))

    keyboard.row(InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
    keyboard.row(InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_stats"))
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))

    text = f"""
üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{len(required_subs)}</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <b>{len(users)}</b>

‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤

üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ

üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """

    if hasattr(message_or_callback, 'message'):
        await bot.edit_message_text(
            text,
            chat_id=message_or_callback.from_user.id,
            message_id=message_or_callback.message.message_id,
            reply_markup=keyboard.as_markup()
        )
    else:
        await message_or_callback.answer(text, reply_markup=keyboard.as_markup())

async def show_main_menu(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üèÜ –¢–æ–ø-50", callback_data="top_tracks"),
        InlineKeyboardButton(text="üéº –ñ–∞–Ω—Ä—ã", callback_data="genres_menu"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="bot_features")
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if hasattr(message_or_callback, 'from_user') and is_admin(message_or_callback.from_user.id):
        keyboard.row(InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))

    text = """
üéµ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Music Bot!</b>

üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É

üëá –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:
    """

    # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    photo_path = "attached_assets/IMG_20250616_203235_655_1750098861252.jpg"

    if hasattr(message_or_callback, 'message'):
        # –≠—Ç–æ callback, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        try:
            await bot.delete_message(
                chat_id=message_or_callback.from_user.id,
                message_id=message_or_callback.message.message_id
            )
        except:
            pass

        if os.path.exists(photo_path):
            photo = FSInputFile(photo_path)
            await bot.send_photo(
                chat_id=message_or_callback.from_user.id,
                photo=photo,
                caption=text,
                reply_markup=keyboard.as_markup()
            )
        else:
            await bot.send_message(
                chat_id=message_or_callback.from_user.id,
                text=text,
                reply_markup=keyboard.as_markup()
            )
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if os.path.exists(photo_path):
            photo = FSInputFile(photo_path)
            await message_or_callback.answer_photo(
                photo=photo,
                caption=text,
                reply_markup=keyboard.as_markup()
            )
        else:
            await message_or_callback.answer(text, reply_markup=keyboard.as_markup())

async def download_single_track(url, user_id, message):
    import time
    import random

    # Create unique folder for each download to prevent conflicts
    unique_id = f"{int(time.time() * 100)}_{random.randint(1000, 9999)}"
    temp_folder = os.path.join(DOWNLOADS_FOLDER, user_id, f"single_{unique_id}")

    if os.path.exists(temp_folder):
        shutil.rmtree(temp_folder)
    os.makedirs(temp_folder, exist_ok=True)

    ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": os.path.join(temp_folder, "%(title)s.%(ext)s"),
            "quiet": True,
            "noplaylist": True,
            "ignoreerrors": True,
            "no_warnings": True,
            "extractaudio": True,
            "audioformat": "mp3",
            "audioquality": "192",
            "writeinfojson": True,
            "writethumbnail": True,
            "writeautomaticsub": False,
            "writesubtitles": False,
            "embed_thumbnail": False,
            "age_limit": None,
            "geo_bypass": True,
            "geo_bypass_country": "US",
            "cookiesfrombrowser": None,
            "extractor_args": {
                "youtube": {
                    "player_client": ["android"]
                }
            },
            "http_headers": {
                "User-Agent": "com.google.android.youtube/17.31.35 (Linux; Android 11)"
            },
            "postprocessors": [
                {
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "mp3",
                    "preferredquality": "192"
                },
                {
                    "key": "FFmpegMetadata",
                    "add_metadata": True
                }
            ],
            "ffmpeg_location": "./ffmpeg"
        }

    try:
        loop = asyncio.get_event_loop()
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await loop.run_in_executor(None, lambda: ydl.extract_info(url, download=True))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not info:
            await message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø")
            return False

        # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        audio_files = [f for f in os.listdir(temp_folder) if f.lower().endswith('.mp3')]

        if audio_files:
            file_path = os.path.join(temp_folder, audio_files[0])

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            title = info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫")
            artist = info.get("uploader", info.get("channel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"))
            duration = info.get("duration", 0)

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if " - " in title:
                parts = title.split(" - ", 1)
                if len(parts) == 2:
                    artist = parts[0].strip()
                    title = parts[1].strip()

            # –ò—â–µ–º —Ñ–∞–π–ª –æ–±–ª–æ–∂–∫–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π
            thumbnail_file = None
            thumbnail_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.bmp']

            all_files = os.listdir(temp_folder)

            # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_files = [f for f in all_files if any(f.lower().endswith(ext) for ext in thumbnail_extensions)]

            for img_file in image_files:
                try:
                    thumbnail_path = os.path.join(temp_folder, img_file)
                    file_size = os.path.getsize(thumbnail_path)

                    if file_size > 0:
                        thumbnail_file = FSInputFile(thumbnail_path)
                        break
                except Exception:
                    continue

            if not thumbnail_file:
                pass

            audio_file = FSInputFile(file_path)
            await message.answer_audio(
                audio_file, 
                title=title,
                performer=artist,
                duration=duration,
                thumbnail=thumbnail_file
            )

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
            user_last_tracks[user_id] = [{
                "title": f"{artist} - {title}",
                "url": url,
                "filepath": file_path
            }]

            return True
        else:
            await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª")
            return False

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {html.escape(str(e))}")
        return False

async def search_multiple_tracks(query, message):
    user_id = str(message.from_user.id)

    try:
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ YouTube Music API —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        search_queries = [
            f"{query} music",
            f"{query} song",
            f"{query} official",
            f"{query} audio",
            query
        ]

        all_results = []

        for search_query in search_queries:
            try:
                request = youtube.search().list(
                    part='snippet,id',
                    q=search_query,
                    type='video',
                    maxResults=20,
                    order='relevance',
                    regionCode='RU',
                    relevanceLanguage='ru',
                    videoCategoryId='10',  # Music category
                    videoDuration='short'  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ
                )
                response = request.execute()

                for item in response['items']:
                    title = item['snippet']['title']
                    description = item['snippet'].get('description', '')
                    channel_title = item['snippet']['channelTitle']

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    if is_music_content(title, description, None, channel_title):
                        all_results.append({
                            'id': item['id']['videoId'],
                            'title': title,
                            'uploader': channel_title,
                            'url': f"https://www.youtube.com/watch?v={item['id']['videoId']}",
                            'webpage_url': f"https://www.youtube.com/watch?v={item['id']['videoId']}"
                        })

                if len(all_results) >= 25:
                    break

            except Exception:
                continue

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        seen_ids = set()
        filtered_entries = []
        for entry in all_results:
            if entry['id'] not in seen_ids:
                seen_ids.add(entry['id'])
                filtered_entries.append(entry)

        # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ API –Ω–µ –Ω–∞—à–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ yt-dlp
        if len(filtered_entries) < 15:
            search_url = f"ytsearch{25 - len(filtered_entries)}:{query} music"
            ydl_opts = {
                "quiet": True,
                "no_warnings": True,
                "extract_flat": True,
                "ignoreerrors": True
            }

            loop = asyncio.get_event_loop()
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                try:
                    info = await loop.run_in_executor(None, lambda: ydl.extract_info(search_url, download=False))

                    if "entries" in info and info["entries"]:
                        for entry in info["entries"]:
                            if entry and entry.get("title"):
                                title = entry.get("title", "")
                                uploader = entry.get("uploader", "")

                                if is_music_content(title, "", None, uploader) and len(filtered_entries) < 25:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ–≥–æ ID –µ—â–µ –Ω–µ—Ç
                                    entry_id = entry.get("id", "")
                                    if entry_id not in seen_ids:
                                        seen_ids.add(entry_id)
                                        filtered_entries.append(entry)
                except Exception:
                    pass

        if filtered_entries:
            user_search_results[user_id] = filtered_entries[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20
            await show_search_results(message, user_id, 0)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {html.escape(str(e))}")

async def show_search_results(message, user_id, start_index):
    if user_id not in user_search_results:
        await message.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
        return

    entries = user_search_results[user_id]
    end_index = min(start_index + 10, len(entries))

    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–∫–æ–≤
    for i in range(start_index, end_index):
        entry = entries[i]
        title = entry.get("title", f"–¢—Ä–µ–∫ {i+1}")
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(title) > 50:
            title = title[:47] + "..."
        keyboard.row(InlineKeyboardButton(text=title, callback_data=f"download:{i}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë —Ç—Ä–µ–∫–∏
    if end_index < len(entries):
        keyboard.row(InlineKeyboardButton(text="‚ñ∂Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"more:{end_index}"))

    text = f"""
üéµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>

üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: <b>{len(entries)}</b>
üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
    """

    if hasattr(message, 'message') and hasattr(message.message, 'message_id'):
        # –≠—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            text=text,
            chat_id=user_id,
            message_id=message.message.message_id,
            reply_markup=keyboard.as_markup()
        )
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=keyboard.as_markup())

async def download_and_send_track(entry, user_id, message, index):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    import time
    import random

    # Create unique folder for each track to prevent conflicts
    unique_id = f"{int(time.time() * 1000)}_{random.randint(1000, 9999)}"
    track_folder = os.path.join(DOWNLOADS_FOLDER, user_id, f"track_{index}_{unique_id}")

    if os.path.exists(track_folder):
        shutil.rmtree(track_folder)
    os.makedirs(track_folder, exist_ok=True)

    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": os.path.join(track_folder, "%(title)s.%(ext)s"),
        "quiet": True,
        "noplaylist": True,
        "ignoreerrors": True,
        "no_warnings": True,
        "extractaudio": True,
        "audioformat": "mp3",
        "audioquality": "192",
        "writeinfojson": True,
        "writethumbnail": True,
        "writeautomaticsub": False,
        "writesubtitles": False,
        "embed_thumbnail": False,
        "age_limit": None,
        "geo_bypass": True,
        "geo_bypass_country": "US",
        "extractor_args": {
            "youtube": {
                "player_client": ["android", "web"]
            }
        },
        "http_headers": {
            "User-Agent": "com.google.android.youtube/17.31.35 (Linux; Android 11)",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "en-us,en;q=0.5",
            "Accept-Encoding": "gzip, deflate",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1"
        },
        "postprocessors": [
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192"
            },
            {
                "key": "FFmpegMetadata",
                "add_metadata": True
            }
        ],
        "ffmpeg_location": "./ffmpeg"
    }

    try:
        track_url = entry.get("webpage_url") or f"https://www.youtube.com/watch?v={entry.get('id')}"

        loop = asyncio.get_event_loop()

        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        info = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = await loop.run_in_executor(None, lambda: ydl.extract_info(track_url, download=True))
        except Exception:
            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ Android –∫–ª–∏–µ–Ω—Ç
            ydl_opts_android = ydl_opts.copy()
            ydl_opts_android["extractor_args"] = {
                "youtube": {
                    "player_client": ["android"]
                }
            }
            try:
                with yt_dlp.YoutubeDL(ydl_opts_android) as ydl:
                    info = await loop.run_in_executor(None, lambda: ydl.extract_info(track_url, download=True))
            except Exception:
                # –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ - web –∫–ª–∏–µ–Ω—Ç —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                ydl_opts_web = ydl_opts.copy()
                ydl_opts_web["extractor_args"] = {
                    "youtube": {
                        "player_client": ["web"]
                    }
                }
                ydl_opts_web["http_headers"] = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
                }
                try:
                    with yt_dlp.YoutubeDL(ydl_opts_web) as ydl:
                        info = await loop.run_in_executor(None, lambda: ydl.extract_info(track_url, download=True))
                except Exception:
                    # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    ydl_opts_minimal = {
                        "format": "bestaudio",
                        "outtmpl": os.path.join(track_folder, "%(title)s.%(ext)s"),
                        "quiet": True,
                        "noplaylist": True,
                        "extractaudio": True,
                        "audioformat": "mp3",
                        "ignoreerrors": True,
                        "extractor_args": {
                            "youtube": {
                                "player_client": ["android"]
                            }
                        },
                        "postprocessors": [{
                            "key": "FFmpegExtractAudio",
                            "preferredcodec": "mp3",
                            "preferredquality": "192"
                        }],
                        "ffmpeg_location": "./ffmpeg"
                    }
                    try:
                        with yt_dlp.YoutubeDL(ydl_opts_minimal) as ydl:
                            info = await loop.run_in_executor(None, lambda: ydl.extract_info(track_url, download=True))
                    except Exception:
                        return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not info:
            return None

        # –ù–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        audio_files = [f for f in os.listdir(track_folder) if f.lower().endswith('.mp3')]

        if audio_files:
            file_path = os.path.join(track_folder, audio_files[0])

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            title = info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫")
            artist = info.get("uploader", info.get("channel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"))
            duration = info.get("duration", 0)

            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if " - " in title:
                parts = title.split(" - ", 1)
                if len(parts) == 2:
                    artist = parts[0].strip()
                    title = parts[1].strip()

            # –ò—â–µ–º —Ñ–∞–π–ª –æ–±–ª–æ–∂–∫–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π
            thumbnail_file = None
            thumbnail_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.bmp']

            all_files = os.listdir(track_folder)

            # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_files = [f for f in all_files if any(f.lower().endswith(ext) for ext in thumbnail_extensions)]

            for img_file in image_files:
                try:
                    thumbnail_path = os.path.join(track_folder, img_file)
                    file_size = os.path.getsize(thumbnail_path)

                    if file_size > 0:
                        thumbnail_file = FSInputFile(thumbnail_path)
                        break
                except Exception:
                    continue

            if not thumbnail_file:
                pass

            audio_file = FSInputFile(file_path)
            await message.answer_audio(
                audio_file, 
                title=title,
                performer=artist,
                duration=duration,
                thumbnail=thumbnail_file
            )

            return {
                "title": f"{artist} - {title}",
                "url": track_url,
                "filepath": file_path
            }
        else:
            return None  # –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

    except Exception:
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏

async def download_audio(url, message):
    user_id = str(message.from_user.id)
    import time
    import random

    # Create unique folder for each download session to prevent conflicts
    unique_id = f"{int(time.time() * 1000)}_{random.randint(1000, 9999)}"
    temp_folder = os.path.join(DOWNLOADS_FOLDER, user_id, f"playlist_{unique_id}")

    if os.path.exists(temp_folder):
        shutil.rmtree(temp_folder)
    os.makedirs(temp_folder, exist_ok=True)

    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    ydl_opts_configs = [
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: Android –∫–ª–∏–µ–Ω—Ç —Å cookiefile
        {
            "quiet": True,
            "extract_flat": True,
            "noplaylist": False,
            "ignoreerrors": True,
            "no_warnings": True,
            "age_limit": None,
            "geo_bypass": True,
            "geo_bypass_country": "US",
            "cookiefile": "cookies.txt",
            "extractor_args": {
                "youtube": {
                    "player_client": ["android"]
                }
            },
            "http_headers": {
                "User-Agent": "com.google.android.youtube/17.31.35 (Linux; Android 11)"
            }
        },
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: Web –∫–ª–∏–µ–Ω—Ç –±–µ–∑ cookies
        {
            "quiet": True,
            "extract_flat": True,
            "noplaylist": False,
            "ignoreerrors": True,
            "no_warnings": True,
            "age_limit": None,
            "geo_bypass": True,
            "geo_bypass_country": "US",
            "extractor_args": {
                "youtube": {
                    "player_client": ["web"]
                }
            },
            "http_headers": {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
        },
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        {
            "quiet": True,
            "extract_flat": True,
            "noplaylist": False,
            "ignoreerrors": True,
            "no_warnings": True
        }
    ]

    info = None
    loop = asyncio.get_event_loop()

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for config_index, ydl_opts_info in enumerate(ydl_opts_configs):
        try:
            with yt_dlp.YoutubeDL(ydl_opts_info) as ydl:
                info = await loop.run_in_executor(None, lambda: ydl.extract_info(url, download=False))

            if info and info.get("entries"):
                break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

        except Exception as e:
            if config_index == len(ydl_opts_configs) - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ: {html.escape(str(e))}")
                return
            continue

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not info:
        await message.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø")
        return

    entries = info.get("entries", [info]) if info.get("entries") else [info]

    # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–Ω—ã–µ/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏)
    valid_entries = [entry for entry in entries if entry is not None and entry.get('id')]

    if not valid_entries:
        await message.answer("‚ùå –í –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤")
        return

    user_last_tracks[user_id] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
    if len(valid_entries) > 1:
        total_tracks = len(valid_entries)
        playlist_title = info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç')

        playlist_info = f"""
üìã <b>–ü–ª–µ–π–ª–∏—Å—Ç –Ω–∞–π–¥–µ–Ω!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {playlist_title}
üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤:</b> <b>{total_tracks}</b>
üöÄ <b>–†–µ–∂–∏–º:</b> –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞

‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...
        """
        await message.answer(playlist_info)

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        batch_size = 3  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        successful_downloads = 0
        failed_downloads = 0

        for i in range(0, len(valid_entries), batch_size):
            batch = valid_entries[i:i + batch_size]

            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress_msg = await message.answer(
                f"üì• <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {i+1}-{min(i+batch_size, len(valid_entries))}/{len(valid_entries)}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{successful_downloads}</b> | ‚ùå –û—à–∏–±–æ–∫: <b>{failed_downloads}</b>"
            )

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            tasks = []
            for j, entry in enumerate(batch):
                if entry:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ entry –Ω–µ None
                    task = download_and_send_track(entry, user_id, message, i + j)
                    tasks.append(task)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
            if tasks:
                results = await asyncio.gather(*tasks, return_exceptions=True)

                for result in results:
                    if isinstance(result, Exception):
                        failed_downloads += 1
                    elif result is not None:
                        user_last_tracks[user_id].append(result)
                        successful_downloads += 1
                    else:
                        failed_downloads += 1

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            try:
                await bot.delete_message(user_id, progress_msg.message_id)
            except:
                pass

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(1)

        completion_text = f"""
‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{successful_downloads}</b>
‚Ä¢ –û—à–∏–±–æ–∫/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: <b>{failed_downloads}</b>
‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: <b>{len(valid_entries)}</b>

üéµ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!
        """
        await message.answer(completion_text)
    else:
        # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
        if valid_entries:
            track_data = await download_and_send_track(valid_entries[0], user_id, message, 0)
            if track_data:
                user_last_tracks[user_id] = [track_data]
        else:
            await message.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω")

async def check_subscription_middleware(handler, event, data):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if hasattr(event, 'from_user') and event.from_user:
        user_id = event.from_user.id

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if is_admin(user_id):
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_subscribed, not_subscribed = await check_user_subscriptions(user_id)

        if not is_subscribed:
            await send_subscription_required_message(event, not_subscribed)
            return

    return await handler(event, data)

@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user_to_database(
        user_id, 
        message.from_user.username, 
        message.from_user.first_name, 
        message.from_user.last_name
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_admin(user_id):
        is_subscribed, not_subscribed = await check_user_subscriptions(user_id)
        if not is_subscribed:
            await send_subscription_required_message(message, not_subscribed)
            return

    await show_main_menu(message)

@router.message(Command("menu"))
async def menu_command(message: Message):
    await show_main_menu(message)

@router.message(Command("addtopl"))
async def add_to_playlist(message: Message, command: CommandObject):
    user_id = str(message.from_user.id)
    args = command.args
    if not args:
        await message.answer("üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n<code>/addtopl –ù–∞–∑–≤–∞–Ω–∏–µ–ü–ª–µ–π–ª–∏—Å—Ç–∞</code>\n\n<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/addtopl –ú–æ–π–ü–ª–µ–π–ª–∏—Å—Ç</code>")
        return

    if user_id not in user_last_tracks or not user_last_tracks[user_id]:
        await message.answer("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ —Ç—Ä–µ–∫.")
        return

    playlists = load_playlists(user_id)
    playlist_name = args.strip()
    if playlist_name not in playlists:
        playlists[playlist_name] = []

    for track in user_last_tracks[user_id]:
        if track not in playlists[playlist_name]:
            playlists[playlist_name].append(track)

    save_playlists(user_id, playlists)
    track_count = len(user_last_tracks[user_id])
    await message.answer(f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\nüéµ {track_count} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç <b>\"{playlist_name}\"</b>")

@router.message(Command("playlists"))
async def show_playlists(message: Message):
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_admin(message.from_user.id):
        is_subscribed, not_subscribed = await check_user_subscriptions(message.from_user.id)
        if not is_subscribed:
            await send_subscription_required_message(message, not_subscribed)
            return

    playlists = load_playlists(user_id)
    if not playlists:
        await message.answer("üì≠ <b>–ü–ª–µ–π–ª–∏—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\nüéµ –°–∫–∞—á–∞–π—Ç–µ —Ç—Ä–µ–∫ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/addtopl –ù–∞–∑–≤–∞–Ω–∏–µ–ü–ª–µ–π–ª–∏—Å—Ç–∞</code> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞!")
        return

    keyboard = InlineKeyboardBuilder()
    for name in playlists:
        keyboard.row(
            InlineKeyboardButton(text=name, callback_data=f"openpl:{name}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"delpl:{name}")
        )

    playlist_text = f"""
üé∂ <b>–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã</b>

üìù –í—Å–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: <b>{len(playlists)}</b>
üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:
    """
    await message.answer(playlist_text, reply_markup=keyboard.as_markup())

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    await show_admin_menu(message)

# Callback handlers
@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback_query: CallbackQuery):
    await show_main_menu(callback_query)

@router.callback_query(F.data == "check_subscriptions")
async def check_subscriptions_callback(callback_query: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_query.from_user.id

    if is_admin(user_id):
        await show_main_menu(callback_query)
        return

    is_subscribed, not_subscribed = await check_user_subscriptions(user_id)

    if is_subscribed:
        await callback_query.answer("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
        await show_main_menu(callback_query)
    else:
        await callback_query.answer("‚ùå –ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        await send_subscription_required_message(callback_query, not_subscribed)

@router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    global admin_waiting_for_channel, admin_in_broadcast_mode
    admin_waiting_for_channel = False
    admin_in_broadcast_mode = False

    await show_admin_menu(callback_query)

@router.callback_query(F.data == "admin_add_channel")
async def admin_add_channel_callback(callback_query: CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    global admin_waiting_for_channel, admin_in_broadcast_mode
    admin_waiting_for_channel = True
    admin_in_broadcast_mode = False

    text = """
‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã</b>

üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>-1001234567890</code> (ID –∫–∞–Ω–∞–ª–∞)
‚Ä¢ <code>@mychannel</code> (username –∫–∞–Ω–∞–ª–∞)

üí° <i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @userinfobot</i>

üëá –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞:
    """

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_menu"))

    await bot.edit_message_text(
        text,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "admin_list_channels")
async def admin_list_channels_callback(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    required_subs = load_required_subscriptions()

    if not required_subs:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç</b>\n\n‚ûï –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
    else:
        text = "üìã <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        for i, (channel_id, channel_info) in enumerate(required_subs.items(), 1):
            title = channel_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            username = channel_info.get('username', '')
            text += f"{i}. <b>{title}</b>\n"
            text += f"   ID: <code>{channel_id}</code>\n"
            if username:
                text += f"   Username: @{username}\n"
            text += "\n"

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))

    await bot.edit_message_text(
        text,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "admin_remove_channel")
async def admin_remove_channel_callback(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    required_subs = load_required_subscriptions()

    if not required_subs:
        await callback_query.answer("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç!")
        return

    keyboard = InlineKeyboardBuilder()

    for channel_id, channel_info in required_subs.items():
        title = channel_info.get('title', f'ID: {channel_id}')
        if len(title) > 30:
            title = title[:27] + "..."

        keyboard.row(InlineKeyboardButton(
            text=f"üóë {title}",
            callback_data=f"admin_del:{channel_id}"
        ))

    keyboard.row(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))

    text = """
üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>

‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:
    """

    await bot.edit_message_text(
        text,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data.startswith("admin_del:"))
async def admin_delete_channel_callback(callback_query: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    channel_id = callback_query.data.split(":", 1)[1]
    required_subs = load_required_subscriptions()

    if channel_id in required_subs:
        channel_title = required_subs[channel_id].get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        del required_subs[channel_id]
        save_required_subscriptions(required_subs)

        await callback_query.answer(f"‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω: {channel_title}")
        await show_admin_menu(callback_query)
    else:
        await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    global admin_waiting_for_channel, admin_in_broadcast_mode
    admin_waiting_for_channel = False
    admin_in_broadcast_mode = True

    users = load_bot_users()

    text = f"""
üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:</b> <b>{len(users)}</b>

üìù <b>–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ –æ–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.

‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üñº –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å –ø–æ–¥–ø–∏—Å—å—é)
‚Ä¢ üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üé¨ –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã
‚Ä¢ ‚≠ï –í–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∏
‚Ä¢ üìé –î–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ üéØ –°—Ç–∏–∫–µ—Ä—ã
‚Ä¢ üéû GIF –∞–Ω–∏–º–∞—Ü–∏–∏

üîò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫:</b>
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:
<code>[–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏](—Å—Å—ã–ª–∫–∞)</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
[üí¨ –ù–∞—à –∫–∞–Ω–∞–ª](https://t.me/mychannel)
[üåê –°–∞–π—Ç](https://example.com)</code>

üí° <b>HTML —Ä–∞–∑–º–µ—Ç–∫–∞:</b>
‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code> - <b>–∂–∏—Ä–Ω—ã–π</b>
‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code> - <i>–∫—É—Ä—Å–∏–≤</i>
‚Ä¢ <code>&lt;code&gt;–∫–æ–¥&lt;/code&gt;</code> - <code>–∫–æ–¥</code>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!
    """

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_menu"))

    await bot.edit_message_text(
        text,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data == "admin_users_stats")
async def admin_users_stats_callback(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    users = load_bot_users()

    if not users:
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(users)
        users_with_username = sum(1 for user in users.values() if user.get('username'))

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recent_users = sorted(
            users.values(), 
            key=lambda x: x.get('last_interaction', 0), 
            reverse=True
        )[:5]

        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>
‚Ä¢ –° username: <b>{users_with_username}</b>
‚Ä¢ –ë–µ–∑ username: <b>{total_users - users_with_username}</b>

üë§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
        """

        for i, user in enumerate(recent_users, 1):
            name = user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if user.get('last_name'):
                name += f" {user.get('last_name')}"
            username = f"@{user.get('username')}" if user.get('username') else "–±–µ–∑ username"

            text += f"\n{i}. <b>{name}</b> ({username})"

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))

    await bot.edit_message_text(
        text,
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤)
@router.message(F.from_user.id == ADMIN_ID)
async def handle_admin_messages(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    global admin_waiting_for_channel, admin_in_broadcast_mode

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
    if message.chat.type != "private":
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if admin_waiting_for_channel and message.text:
        text = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if text.startswith('-') or text.startswith('@') or text.lstrip('-').isdigit():
            await handle_admin_add_channel_command(message, text)
            return

    # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if admin_in_broadcast_mode:
        await handle_admin_broadcast(message)
        return

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏ —Ç.–¥.)
    await handle_regular_message(message)

async def handle_admin_add_channel_command(message: Message, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    global admin_waiting_for_channel

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞
    if text.startswith('@'):
        channel_identifier = text
    else:
        try:
            channel_id = int(text)
            channel_identifier = channel_id
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!")
            return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_identifier)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        bot_member = await bot.get_chat_member(chat.id, bot.id)
        if bot_member.status not in ['administrator', 'creator']:
            await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ!")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        required_subs = load_required_subscriptions()

        channel_info = {
            'title': chat.title,
            'username': chat.username,
            'type': chat.type,
            'invite_link': chat.invite_link
        }

        required_subs[str(chat.id)] = channel_info
        save_required_subscriptions(required_subs)

        success_text = f"""
‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat.title}
‚Ä¢ <b>ID:</b> <code>{chat.id}</code>
‚Ä¢ <b>–¢–∏–ø:</b> {chat.type}
"""

        if chat.username:
            success_text += f"‚Ä¢ <b>Username:</b> @{chat.username}\n"

        success_text += "\nüéµ –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."

        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu"))

        await message.answer(success_text, reply_markup=keyboard.as_markup())

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        admin_waiting_for_channel = False

    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:\n<code>{html.escape(str(e))}</code>\n\n"
        error_text += "üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
        error_text += "‚Ä¢ –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
        error_text += "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        error_text += "‚Ä¢ ID –∏–ª–∏ username —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"

        await message.answer(error_text)

def parse_buttons_from_text(text):
    """–ü–∞—Ä—Å–∏—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏"""
    if not text:
        return text, None
    
    lines = text.split('\n')
    clean_lines = []
    buttons = []
    
    for line in lines:
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏](—Å—Å—ã–ª–∫–∞)
        import re
        button_pattern = r'\[([^\]]+)\]\(([^)]+)\)'
        matches = re.findall(button_pattern, line)
        
        if matches:
            # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            for button_text, button_url in matches:
                buttons.append({'text': button_text.strip(), 'url': button_url.strip()})
            
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
            clean_line = re.sub(button_pattern, '', line).strip()
            if clean_line:
                clean_lines.append(clean_line)
        else:
            clean_lines.append(line)
    
    clean_text = '\n'.join(clean_lines).strip()
    return clean_text, buttons if buttons else None

async def handle_admin_broadcast(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    users = load_bot_users()

    if not users:
        await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return

    # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏
    buttons = None
    clean_text = None
    clean_caption = None
    
    if message.text:
        clean_text, buttons = parse_buttons_from_text(message.text)
    elif message.caption:
        clean_caption, buttons = parse_buttons_from_text(message.caption)

    # Generate unique broadcast id
    broadcast_id = str(time.time())

    # Save the message to pending broadcasts with buttons and cleaned text
    pending_broadcasts[broadcast_id] = {
        'message': message,
        'buttons': buttons,
        'clean_text': clean_text,
        'clean_caption': clean_caption
    }

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_broadcast:{broadcast_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_menu")
    )

    confirm_text = f"""
üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> <b>{len(users)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
    """

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        display_text = clean_text if clean_text else message.text
        confirm_text += f"\nüìÑ –¢–µ–∫—Å—Ç: <i>{display_text[:100]}{'...' if len(display_text) > 100 else ''}</i>"
    elif message.photo:
        confirm_text += "\nüñº –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"
        if message.caption:
            display_caption = clean_caption if clean_caption else message.caption
            confirm_text += f" —Å –ø–æ–¥–ø–∏—Å—å—é: <i>{display_caption[:50]}{'...' if len(display_caption) > 50 else ''}</i>"
    elif message.audio:
        confirm_text += "\nüéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª"
    elif message.voice:
        confirm_text += "\nüé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.video:
        confirm_text += "\nüé¨ –í–∏–¥–µ–æ"
    elif message.video_note:
        confirm_text += "\n‚≠ï –í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫"
    elif message.document:
        confirm_text += "\nüìé –î–æ–∫—É–º–µ–Ω—Ç"
    elif message.sticker:
        confirm_text += "\nüéØ –°—Ç–∏–∫–µ—Ä"
    elif message.animation:
        confirm_text += "\nüéû GIF –∞–Ω–∏–º–∞—Ü–∏—è"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–∞—Ö
    if buttons:
        confirm_text += f"\n\nüîò <b>–ö–Ω–æ–ø–∫–∏:</b> {len(buttons)} —à—Ç."
        for i, btn in enumerate(buttons[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–Ω–æ–ø–∫–∏
            confirm_text += f"\n  {i}. {btn['text']} ‚Üí {btn['url'][:30]}{'...' if len(btn['url']) > 30 else ''}"
        if len(buttons) > 3:
            confirm_text += f"\n  ... –∏ –µ—â—ë {len(buttons) - 3}"

    confirm_text += "\n\n‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>"

    await message.answer(confirm_text, reply_markup=keyboard.as_markup())

@router.callback_query(F.data == "top_tracks")
async def top_tracks_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_admin(user_id):
        is_subscribed, not_subscribed = await check_user_subscriptions(user_id)
        if not is_subscribed:
            await send_subscription_required_message(callback_query, not_subscribed)
            return

    await callback_query.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø —Ç—Ä–µ–∫–∏...")
    await show_top_tracks_menu(callback_query)

@router.callback_query(F.data == "genres_menu")
async def genres_menu_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_admin(user_id):
        is_subscribed, not_subscribed = await check_user_subscriptions(user_id)
        if not is_subscribed:
            await send_subscription_required_message(callback_query, not_subscribed)
            return

    await show_genres_menu(callback_query)

@router.callback_query(F.data == "bot_features")
async def bot_features_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_admin(user_id):
        is_subscribed, not_subscribed = await check_user_subscriptions(user_id)
        if not is_subscribed:
            await send_subscription_required_message(callback_query, not_subscribed)
            return

    await show_bot_features(callback_query)

@router.callback_query(F.data.startswith("toppage:"))
async def top_page_callback(callback_query: CallbackQuery):
    page = int(callback_query.data.split(":")[1])
    await show_top_tracks_menu(callback_query, page)

@router.callback_query(F.data.startswith("genre:"))
async def genre_callback(callback_query: CallbackQuery):
    genre = callback_query.data.split(":")[1]
    await callback_query.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é {MUSIC_GENRES.get(genre, genre)} —Ç—Ä–µ–∫–∏...")
    await show_genre_tracks(callback_query, genre)

@router.callback_query(F.data.startswith("genrepage:"))
async def genre_page_callback(callback_query: CallbackQuery):
    parts = callback_query.data.split(":")
    genre, page = parts[1], int(parts[2])
    await show_genre_tracks(callback_query, genre, page)

@router.callback_query(F.data.startswith("toptrack:"))
async def top_track_callback(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    track_index = int(callback_query.data.split(":")[1])

    tracks = await get_youtube_top_tracks()
    if track_index < len(tracks):
        track = tracks[track_index]
        await callback_query.answer("üì• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")

        loading_msg = await bot.send_message(user_id, f"üì• –ó–∞–≥—Ä—É–∂–∞—é: {track['title']}...")
        success = await download_single_track(track['url'], user_id, loading_msg)

        try:
            if success:
                await bot.edit_message_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", user_id, loading_msg.message_id)
            else:
                await bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", user_id, loading_msg.message_id)
        except Exception:
            if success:
                await bot.send_message(user_id, "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:
                await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data.startswith("genretrack:"))
async def genre_track_callback(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    parts = callback_query.data.split(":")
    genre, track_index = parts[1], int(parts[2])

    tracks = await get_youtube_top_tracks(genre)
    if track_index < len(tracks):
        track = tracks[track_index]
        await callback_query.answer("üì• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")

        loading_msg = await bot.send_message(user_id, f"üì• –ó–∞–≥—Ä—É–∂–∞—é: {track['title']}...")
        success = await download_single_track(track['url'], user_id, loading_msg)

        try:
            if success:
                await bot.edit_message_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", user_id, loading_msg.message_id)
            else:
                await bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", user_id, loading_msg.message_id)
        except Exception:
            if success:
                await bot.send_message(user_id, "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:
                await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data.startswith("openpl:"))
async def open_playlist(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    playlist_name = callback_query.data.split(":", 1)[1]
    playlists = load_playlists(user_id)
    tracks = playlists.get(playlist_name, [])

    if not tracks:
        await callback_query.answer("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç–æ–π")
        return

    keyboard = InlineKeyboardBuilder()
    for idx, track in enumerate(tracks):
        title = track.get("title", f"–¢—Ä–µ–∫ {idx+1}")
        keyboard.row(InlineKeyboardButton(text=title, callback_data=f"playtrack:{playlist_name}:{idx}"))

    playlist_content_text = f"""
üéµ <b>–ü–ª–µ–π–ª–∏—Å—Ç: "{playlist_name}"</b>

üìÄ –¢—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ: <b>{len(tracks)}</b>
üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:
    """
    await bot.send_message(user_id, playlist_content_text, reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("delpl:"))
async def delete_playlist(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    playlist_name = callback_query.data.split(":", 1)[1]
    playlists = load_playlists(user_id)

    if playlist_name in playlists:
        del playlists[playlist_name]
        save_playlists(user_id, playlists)
        await callback_query.answer(text=f"–£–¥–∞–ª—ë–Ω: {playlist_name}")
        await bot.send_message(user_id, f"–ü–ª–µ–π–ª–∏—Å—Ç \"{playlist_name}\" —É–¥–∞–ª—ë–Ω.")
    else:
        await callback_query.answer(text="–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data.startswith("playtrack:"))
async def send_track(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    parts = callback_query.data.split(":")
    playlist_name, idx = parts[1], int(parts[2])

    playlists = load_playlists(user_id)
    track = playlists.get(playlist_name, [])[idx]

    file_path = track.get("filepath")
    if file_path and os.path.exists(file_path):
        audio_file = FSInputFile(file_path)
        await bot.send_audio(user_id, audio_file, title=track.get("title", "–¢—Ä–µ–∫"))
    else:
        await bot.send_message(user_id, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {track.get('title', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")

@router.callback_query(F.data.startswith("download:"))
async def download_selected_track(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    track_index = int(callback_query.data.split(":")[1])

    if user_id not in user_search_results:
        await callback_query.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    entries = user_search_results[user_id]
    if track_index >= len(entries):
        await callback_query.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    selected_track = entries[track_index]
    track_url = f"https://www.youtube.com/watch?v={selected_track['id']}"

    await callback_query.answer("üì• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await bot.send_message(user_id, f"üì• –ó–∞–≥—Ä—É–∂–∞—é: {selected_track.get('title', '–¢—Ä–µ–∫')}...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫
    success = await download_single_track(track_url, user_id, loading_msg)

    try:
        if success:
            await bot.edit_message_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", user_id, loading_msg.message_id)
        else:
            await bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", user_id, loading_msg.message_id)
    except Exception:
        if success:
            await bot.send_message(user_id, "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data.startswith("more:"))
async def show_more_results(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    start_index = int(callback_query.data.split(":")[1])

    await show_search_results(callback_query, user_id, start_index)

@router.callback_query(F.data.startswith("confirm_broadcast:"))
async def confirm_broadcast_callback(callback_query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    global admin_in_broadcast_mode
    broadcast_id = callback_query.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if broadcast_id not in pending_broadcasts:
        await callback_query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    broadcast_data = pending_broadcasts[broadcast_id]
    target_message = broadcast_data['message']
    buttons = broadcast_data.get('buttons')
    clean_text = broadcast_data.get('clean_text')
    clean_caption = broadcast_data.get('clean_caption')

    try:
        await callback_query.answer("üì§ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await broadcast_message_to_users(target_message, buttons, callback_query.from_user.id, clean_text, clean_caption)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        del pending_broadcasts[broadcast_id]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        admin_in_broadcast_mode = False

    except Exception as e:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {html.escape(str(e))}"
        )

async def handle_regular_message(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤, —Å—Å—ã–ª–∫–∏)"""
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user_to_database(
        user_id, 
        message.from_user.username, 
        message.from_user.first_name, 
        message.from_user.last_name
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not is_admin(user_id):
        is_subscribed, not_subscribed = await check_user_subscriptions(user_id)
        if not is_subscribed:
            await send_subscription_required_message(message, not_subscribed)
            return

    text = message.text.strip()
    if text.startswith("http"):
        asyncio.create_task(download_audio(text, message))
    else:
        await message.answer("üîç <b>–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤...</b>\n‚è≥ –ò—â—É –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–∞—Å")
        asyncio.create_task(search_multiple_tracks(text, message))

@router.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if is_admin(user_id):
        return

    await handle_regular_message(message)

async def set_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ / –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="addtopl", description="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"),
        BotCommand(command="playlists", description="–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    ]
    await bot(SetMyCommands(commands=commands))

async def main():
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())